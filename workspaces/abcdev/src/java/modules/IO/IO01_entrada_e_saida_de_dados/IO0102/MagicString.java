import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class MagicString {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // IntroduÃ§Ã£o
        System.out.println("\nBem-vindo(a) ao SantuÃ¡rio das Palavras Encantadas!");
        System.out.println("Eu sou o GuardiÃ£o das Letras, um mago poderoso em decifrar a verdadeira essÃªncia dos nomes.\n");

        // Entrada do nome do jogador
        System.out.print("Diga-me, jovem aventureiro(a), qual Ã© o nome que carregas? ");
        String originalName = scanner.nextLine().trim();
        
        // TransformaÃ§Ãµes mÃ¡gicas
        System.out.println("\nAh, " + originalName + ", um nome com grande potencial! Vamos ver do que ele Ã© capaz...\n");

        // 1. Nome em Letras MaiÃºsculas
        String upperCaseName = originalName.toUpperCase();
        System.out.println("âœ¨ TransmutaÃ§Ã£o para letras maiÃºsculas: " + upperCaseName);
        
        // 2. Nome em Letras MinÃºsculas
        String lowerCaseName = originalName.toLowerCase();
        System.out.println("ðŸ”® Encantamento para letras minÃºsculas: " + lowerCaseName);

        // 3. Nome ao ContrÃ¡rio
        String reversedName = new StringBuilder(originalName).reverse().toString();
        System.out.println("ðŸŒ€ Espelho da alma (nome invertido): " + reversedName);

        // 4. SubstituiÃ§Ã£o de Vogais por Asteriscos
        String vowelMaskedName = originalName.replaceAll("[aeiouAEIOU]", "*");
        System.out.println("ðŸŒ™ Camuflagem de vogais: " + vowelMaskedName);

        // 5. Metade Esquerda do Nome
        String leftHalfName = originalName.substring(0, originalName.length() / 2);
        System.out.println("ðŸ”— DivisÃ£o de poder (metade esquerda): " + leftHalfName);

        // 6. Nome com Consoantes Dobradas
        String doubledConsonantsName = originalName.replaceAll("([bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ])", "$1$1");
        System.out.println("ðŸ’¥ Consoantes fortalecidas: " + doubledConsonantsName);

        // 7. Nome sem as Primeiras e Ãšltimas Letras
        if (originalName.length() > 2) {
            String innerName = originalName.substring(1, originalName.length() - 1);
            System.out.println("ðŸ”“ Nome interior (sem a primeira e Ãºltima letras): " + innerName);
        } else {
            System.out.println("ðŸ”’ O nome Ã© muito curto para esta magia.");
        }

        // 8. Nome em CÃ³digo Morse (simplificado)
        String morseCodeName = toMorseCode(originalName);
        System.out.println("ðŸ“¡ Nome em cÃ³digo Morse: " + morseCodeName);

        // 9. Numerologia do Nome
        int numerologyNumber = calculateNumerology(originalName);
        System.out.println("ðŸ”¢ Numerologia do nome: " + numerologyNumber);

        // Encerramento
        System.out.println("\nO seu nome, " + originalName + ", possui uma magia Ãºnica! Use seu poder com sabedoria.");
        
        scanner.close();
    }

    // FunÃ§Ã£o auxiliar para converter uma String para CÃ³digo Morse
    public static String toMorseCode(String text) {
        Map<Character, String> morseMap = new HashMap<>();
        morseMap.put('A', ".-");    morseMap.put('B', "-...");
        morseMap.put('C', "-.-.");  morseMap.put('D', "-..");
        morseMap.put('E', ".");     morseMap.put('F', "..-.");
        morseMap.put('G', "--.");   morseMap.put('H', "....");
        morseMap.put('I', "..");    morseMap.put('J', ".---");
        morseMap.put('K', "-.-");   morseMap.put('L', ".-..");
        morseMap.put('M', "--");    morseMap.put('N', "-.");
        morseMap.put('O', "---");   morseMap.put('P', ".--.");
        morseMap.put('Q', "--.-");  morseMap.put('R', ".-.");
        morseMap.put('S', "...");   morseMap.put('T', "-");
        morseMap.put('U', "..-");   morseMap.put('V', "...-");
        morseMap.put('W', ".--");   morseMap.put('X', "-..-");
        morseMap.put('Y', "-.--");  morseMap.put('Z', "--..");
        morseMap.put('1', ".----"); morseMap.put('2', "..---");
        morseMap.put('3', "...--"); morseMap.put('4', "....-");
        morseMap.put('5', "....."); morseMap.put('6', "-....");
        morseMap.put('7', "--..."); morseMap.put('8', "---..");
        morseMap.put('9', "----."); morseMap.put('0', "-----");
        morseMap.put(' ', "   ");

        StringBuilder morseCode = new StringBuilder();
        for (char c : text.toUpperCase().toCharArray()) {
            morseCode.append(morseMap.getOrDefault(c, "")).append(" ");
        }
        return morseCode.toString().trim();
    }

    // FunÃ§Ã£o auxiliar para calcular o nÃºmero da numerologia de um nome
    public static int calculateNumerology(String text) {
        int sum = 0;
        for (char c : text.toUpperCase().toCharArray()) {
            if (c >= 'A' && c <= 'Z') {
                sum += c - 'A' + 1;
            }
        }
        return reduceToSingleDigit(sum);
    }

    // FunÃ§Ã£o para reduzir um nÃºmero a um Ãºnico dÃ­gito, com exceÃ§Ãµes para nÃºmeros mestres
    public static int reduceToSingleDigit(int number) {
        while (number > 9 && number != 11 && number != 22 && number != 33) {
            int sum = 0;
            while (number > 0) {
                sum += number % 10;
                number /= 10;
            }
            number = sum;
        }
        return number;
    }
}
